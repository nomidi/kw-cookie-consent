<?php

    namespace kw\cookieconsent;



    use SilverStripe\Core\Config\Config;
    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\FieldList;
    use SilverStripe\Forms\LiteralField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\Tab;
    use SilverStripe\Forms\TabSet;
    use SilverStripe\Forms\TextareaField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use SilverStripe\View\Parsers\URLSegmentFilter;

    class CookieCategory extends DataObject
    {
        private static $singular_name = 'Cookie Category';
        private static $table_name = 'CookieCategory';

        private static $db = array(
            'Title'=>'Varchar',
            'Key'=> 'Varchar',
            'Content'=>'HTMLText',
            'Required'=>'Boolean'


        );




        private static $has_many = array(
            'CookieEntries'=>'kw\cookieconsent\CookieEntry'
        );

        public function getCMSFields()
        {
            $fields = FieldList::create(TabSet::create('Root', $mainTab = Tab::create('Main')));

            if($this->Title != ''){
                $fields->addFieldToTab('Root.Main', new ReadonlyField('Title','Title'));
            } else {
                $fields->addFieldToTab('Root.Main', new TextField('Title','Title'));
            }

            $fields->addFieldsToTab('Root.Main', array(


                LiteralField::create('KeyLiteral', "<p>Javascript Key: $this->Key</p>"),
                TextareaField::create('Content'),
                CheckboxField::create('Required')

            ));




            $this->extend('updateCMSFields', $fields);
            return $fields;
        }
        public function onBeforeWrite()
        {
            parent::onBeforeWrite(); // TODO: Change the autogenerated stub
            $filter = URLSegmentFilter::create();
            $this->Key = $filter->filter($this->Title);
        }



        public function requireDefaultRecords()
        {
            parent::requireDefaultRecords();


            $entry = CookieCategory::get()->first();
            if (!$entry) {
                $GenerateConfig = Config::inst()->get('kw\cookieconsent\CookieCategory', 'OnInit');

                foreach ($GenerateConfig as $key => $entry) {
                    if (is_array($entry) && array_key_exists('Title', $entry)) {
                        $title = $entry['Title'];
                    } else {
                        $title = $key;
                    }
                    if (is_array($entry) && array_key_exists('Required', $entry)) {
                        $required = true;
                    } else {
                        $required = false;
                    }
                    if (is_array($entry) && array_key_exists('CookieEntries', $entry)) {
                        $cookies = $entry['CookieEntries'];
                    } else {
                        $cookies = false;
                    }
                    if (is_array($entry) && array_key_exists('Content', $entry)) {
                        $content = $entry['Content'];
                    } else {
                        $content = false;
                    }
                    self::make_entry(
                        $title,
                        $content,
                        $required,
                        $cookies
                    );
                }

                DB::alteration_message("Added default CookieCategory", "created");
            }
        }
        public static function make_entry($title, $content, $required, $cookies)
        {
            $filter = URLSegmentFilter::create();
            $CookieCategory = CookieCategory::create();
            $CookieCategory->Title = $title;
            $CookieCategory->Key = $filter->filter($title);
            $CookieCategory->Content = $content;
            $CookieCategory->Required = $required;
            $CookieCategoryID = $CookieCategory->write();

            if (is_array($cookies)) {
                CookieEntry::make_entry(
                    $cookies,
                    $CookieCategoryID
                );
            }


            return $CookieCategory;
        }
    }
