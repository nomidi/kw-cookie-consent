<?php

    namespace kw\cookieconsent;

    use SilverStripe\Core\Config\Config;
    use SilverStripe\Forms\LiteralField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\RequiredFields;
    use SilverStripe\Forms\TextareaField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use SilverStripe\ORM\DB;
    use SilverStripe\View\Parsers\URLSegmentFilter;

    class CookieEntry extends DataObject
    {
        private static $singular_name = 'CookieEntry';
        private static $table_name = 'CookieEntry';

        private static $db = array(
            'Title'=>'Varchar',
            'CookieKey'=>'Varchar',
            'Provider'=>'Varchar',
            'Purpose'=>'Text',
            'Policy'=>'Varchar',
            'CookieName'=>'Varchar',
            'Time'=>'Varchar',
            'HTMLCode'=>'HTMLText',
            'HTMLCallback'=>'Varchar',
             'TextBlockedInfo'=>'Varchar',
            'TextUnblockLink'=>'Varchar'

        );

        private static $has_one = array(
            'CookieCategory'=>'kw\cookieconsent\CookieCategory'
        );


        public function getCMSValidator()
        {
            return new RequiredFields(array(
                'Title','Provider','Purpose','Policy'
            ));
        }


        public static function make_entry($data, $CookieCategoryID)
        {
            $CookieEntry = CookieEntry::create();
            $CookieEntry->Title = $data['Title'];
            $CookieEntry->Provider = $data['Provider'];
            $CookieEntry->Purpose = $data['Purpose'];
            $CookieEntry->CookieName = $data['CookieName'];
            $CookieEntry->Time = $data['Time'];
            $CookieEntry->CookieCategoryID =  $CookieCategoryID;
            $CookieEntry->write();
            DB::alteration_message("Added CookieEntry ".$data['Title'], "created");
            return $CookieEntry;
        }

        public function getCMSFields()
        {
            $fields = parent::getCMSFields();
            $defaultDataArray = Config::inst()->get('kw\cookieconsent\CookieEntry', 'DefaultData');

            /* $fields->addFieldsToTab('Root.Main', array(
                 DropdownField::create('DefaultData', _t('CookieCategory.DEFAULTDATA', "Service"),$defaultDataArray),
             ));*/
            if ($this->Title != '') {
                $fields->addFieldToTab('Root.Main', new ReadonlyField('Title', 'Title'));
            } else {
                $fields->addFieldToTab('Root.Main', new TextField('Title', 'Title'));
            }




            $fields->addFieldToTab('Root.Code', new LiteralField('HTMLCodeEX', '<a href="https://klaro.kiprotect.com/" target="_blank">Examples</a>'));
            $fields->addFieldToTab('Root.Code', new TextareaField('HTMLCode'));
            $fields->addFieldToTab('Root.Main', new LiteralField('CookieKey', '<br>CookieKey: '.$this->CookieKey));
            $fields->addFieldToTab('Root.Code', new TextField('HTMLCallback', _t('CookieSiteConfig.HTMLCallback', "Callback Funktionsname")));

            $fields->addFieldToTab('Root.Code', new TextField('TextBlockedInfo', _t('CookieSiteConfig.TextBlockedInfo', "Text Dienst geblocked")));
            $fields->addFieldToTab('Root.Code', new TextField('TextUnblockLink', _t('CookieSiteConfig.TextUnblockLink', "Text Dienst Cookie zulassen")));


            return $fields;
        }

        public function onBeforeWrite()
        {
            parent::onBeforeWrite(); // TODO: Change the autogenerated stub
            $filter = URLSegmentFilter::create();
            $this->CookieKey = $filter->filter($this->Title);
            /*$curLocale = Translatable::get_current_locale();
            if($this->hasExtension('Translatable') && \Translatable::default_locale() != $curLocale){
                $obj = DataObject::get_by_id('kw\cookieconsent\CookieCategory', $this->CookieCategoryID); // original language
                $translatedObj = $obj->getTranslation($curLocale);
                $this->CookieCategoryID = $translatedObj->ID;
            }*/
        }

        public function onAfterWrite()
        {
            parent::onAfterWrite(); // TODO: Change the autogenerated stub
            CookieSiteConfig::writeConfig();
        }
    }
